from pulp import *

import pandas as pd

R_all = pd.read_table('7-12.txt')


def getresult():
    prob = LpProblem('m_r', LpMinimize)
    f_c = [80, 81, 81, 82, 84, 83]  # 单位粉丝成本
    f_v = [56, 57, 59, 56, 65, 65]  # 单位粉丝价值
    t = [0.11, 0.11, 0.12, 0.11, 0.14, 0.14]  # 粉丝转化率
    p = [1405, 1400, 1428, 1562, 1410, 1410]  # 复购客单价，以上都为7-12月
    plen = len(p) - 1
    xt = [6516, 5716, 6461, 4426, 6245, 6747, 5811, 7112, 7002, 3343, 1668, 13421, 12861, 14169, 14281]  # 19.4-20.6 约单数
    xtlen = len(xt) - 1
    # 复购每个月的留存
    rs = [R_all.iloc[:, i] for i in range(5)]
    rsiLen = len(rs[0]) - 1
    # 每个月增值部业绩和16个月以前的营销留存
    y_zengzhi = [346975, 362112, 353667, 384863, 404928, 375722]
    y_yiliu = [1000000, 1000000, 1000000, 1000000, 1000000, 1000000]
    m_roi = 2.2
    min_roi = 2.5
    m_c = 50000000
    xs = ["x0", "x1", "x2", "x3", "x4", "x5"]
    xs = [LpVariable(x, lowBound=10000) for x in xs]
    xslen = len(xs) - 1

    fv = sum([xs[i] * f_v[i] for i in range(xslen)])
    zengzhi = sum([y_zengzhi[i] for i in range(xslen)])
    yiliu = sum([y_yiliu[i] for i in range(xslen)])

    countp = lambda rlst: sum([xt[xt_i] * rlst[xt_i] for xt_i in range(xtlen - 1)])
    pv0 = sum([p[i] * (countp(rs[i]) + xs[i] * t[i] * rs[i][rsiLen]) for i in range(plen)])

    a_yeji = 1 / (fv + zengzhi + yiliu + pv0)
    z = sum([xs[i] * f_c[i] for i in range(xslen)]) * a_yeji

    prob += z


    # 载入约束变量

    pv1 = [ for i in range(plen)]

    prob += (p[0] * (
            xt[0] * r_7[0] + xt[1] * r_7[1] + xt[2] * r_7[2] + xt[3] * r_7[3] + xt[4] * r_7[4] + xt[5] * r_7[5] +
            xt[6] * r_7[6] + xt[7] * r_7[7] + xt[8] * r_7[8] + xt[9] * r_7[9] + xt[10] * r_7[10] + xt[11] * r_7[
                11] + xt[12] * r_7[12] + xt[13] * r_7[13] + xt[14] * r_7[14] + x[0] * t[0] * r_7[15]) + y_zengzhi[
                 0] + y_yiliu[0] + x[0] * f_v[0]) / x[0] * f_c[0] - m_roi >= 0  # 约束条件1


    # prob += (p[1] * (
    #         xt[1] * r_8[0] + xt[2] * r_8[1] + xt[3] * r_8[2] + xt[4] * r_8[3] + xt[5] * r_8[4] + xt[6] * r_8[5] +
    #         xt[7] * r_8[6] + xt[8] * r_8[7] + xt[9] * r_8[8] + xt[10] * r_8[9] + xt[11] * r_8[10] + xt[12] * r_8[
    #             11] + xt[13] * r_8[12] + xt[14] * r_8[13] + x[0] * t[0] * r_8[14] + x[1] * t[1] * r_8[15]) +
    #          y_zengzhi[1] + y_yiliu[1] + x[1] * f_v[1]) / x[1] * f_c[1] - m_roi >= 0
    # prob += (p[2] * (
    #         xt[2] * r_9[0] + xt[3] * r_9[1] + xt[4] * r_9[2] + xt[5] * r_9[3] + xt[6] * r_9[4] + xt[7] * r_9[5] +
    #         xt[8] * r_9[6] + xt[9] * r_9[7] + xt[10] * r_9[8] + xt[11] * r_9[9] + xt[12] * r_9[10] + xt[13] * r_9[
    #             11] + xt[14] * r_9[12] + x[0] * t[0] * r_9[13] + x[1] * t[1] * r_9[14] + x[2] * t[2] * r_9[15]) +
    #          y_zengzhi[2] + y_yiliu[2] + x[2] * f_v[2]) / x[2] * f_c[2] - m_roi >= 0
    #
    # prob += (p[3] * (
    #         xt[3] * r_10[0] + xt[4] * r_10[1] + xt[5] * r_10[2] + xt[6] * r_10[3] + xt[7] * r_10[4] + xt[8] * r_10[
    #     5] + xt[9] * r_10[6] + xt[10] * r_10[7] + xt[11] * r_10[8] + xt[12] * r_10[9] + xt[13] * r_10[10] + xt[14] *
    #         r_10[11] + x[0] * t[0] * r_10[12] + x[1] * t[1] * r_10[13] + x[2] * t[2] * r_10[14] + x[3] * t[3] *
    #         r_10[15]) + y_zengzhi[3] + y_yiliu[3] + x[3] * f_v[3]) / x[3] * f_c[3] - m_roi >= 0
    # prob += (p[4] * (
    #         xt[4] * r_11[0] + xt[5] * r_11[1] + xt[6] * r_11[2] + xt[7] * r_11[3] + xt[8] * r_11[4] + xt[9] * r_11[
    #     5] + xt[10] * r_11[6] + xt[11] * r_11[7] + xt[12] * r_11[8] + xt[13] * r_11[9] + xt[14] * r_11[10] + x[0] *
    #         t[0] * r_11[11] + x[1] * t[1] * r_11[12] + x[2] * t[2] * r_11[13] + x[3] * t[3] * r_11[14] + x[4] * t[
    #             4] * r_11[15]) + y_zengzhi[4] + y_yiliu[4] + x[4] * f_v[4]) / x[4] * f_c[4] - m_roi >= 0
    #
    # prob += (p[5] * (
    #         xt[5] * r_12[0] + xt[6] * r_12[1] + xt[7] * r_12[2] + xt[8] * r_12[3] + xt[9] * r_12[4] + xt[10] * r_12[
    #     5] + xt[11] * r_12[6] + xt[12] * r_12[7] + xt[13] * r_12[8] + xt[14] * r_12[9] + x[0] * t[0] * r_12[10] + x[
    #             1] * t[1] * r_12[11] + x[2] * t[2] * r_12[12] + x[3] * t[3] * r_12[13] + x[4] * t[4] * r_12[14] + x[
    #             5] * t[5] * r_12[15]) + y_zengzhi[5] + y_yiliu[5] + x[5] * f_v[5]) / x[5] * f_c[5] - m_roi >= 0
    #
    # prob += m_c - (x[0] * f_c[0] + x[1] * f_c[1] + x[2] * f_c[2] + x[3] * f_c[3] + x[4] * f_c[4] + x[5] * f_c[5]) >= 0
    # prob += (x[0] * f_v[0] + x[1] * f_v[1] + x[2] * f_v[2] + x[3] * f_v[3] + x[4] * f_v[4] + x[5] * f_v[5] + \
    #          y_zengzhi[0] + y_zengzhi[1] + y_zengzhi[2] + y_zengzhi[3] + y_zengzhi[4] + y_zengzhi[5] + \
    #          y_yiliu[0] + y_yiliu[1] + y_yiliu[2] + y_yiliu[3] + y_yiliu[4] + y_yiliu[5] + \
    #          p[0] * (xt[0] * r_7[0] + xt[1] * r_7[1] + xt[2] * r_7[2] + xt[3] * r_7[3] + xt[4] * r_7[4] + xt[5] * r_7[
    #             5] + xt[6] * r_7[6] + xt[7] * r_7[7] + xt[8] * r_7[8] + xt[9] * r_7[9] + xt[10] * r_7[10] + xt[11] *
    #                  r_7[11] + xt[12] * r_7[12] + xt[13] * r_7[13] + xt[14] * r_7[14] + x[0] * t[0] * r_7[15]) + \
    #          p[1] * (xt[1] * r_8[0] + xt[2] * r_8[1] + xt[3] * r_8[2] + xt[4] * r_8[3] + xt[5] * r_8[4] + xt[6] * r_8[
    #             5] + xt[7] * r_8[6] + xt[8] * r_8[7] + xt[9] * r_8[8] + xt[10] * r_8[9] + xt[11] * r_8[10] + xt[12] *
    #                  r_8[11] + xt[13] * r_8[12] + xt[14] * r_8[13] + x[0] * t[0] * r_8[14] + x[1] * t[1] * r_8[15]) + \
    #          p[2] * (xt[2] * r_9[0] + xt[3] * r_9[1] + xt[4] * r_9[2] + xt[5] * r_9[3] + xt[6] * r_9[4] + xt[7] * r_9[
    #             5] + xt[8] * r_9[6] + xt[9] * r_9[7] + xt[10] * r_9[8] + xt[11] * r_9[9] + xt[12] * r_9[10] + xt[13] *
    #                  r_9[11] + xt[14] * r_9[12] + x[0] * t[0] * r_9[13] + x[1] * t[1] * r_9[14] + x[2] * t[2] * r_9[
    #                      15]) + \
    #          p[3] * (xt[3] * r_10[0] + xt[4] * r_10[1] + xt[5] * r_10[2] + xt[6] * r_10[3] + xt[7] * r_10[4] + xt[8] *
    #                  r_10[5] + xt[9] * r_10[6] + xt[10] * r_10[7] + xt[11] * r_10[8] + xt[12] * r_10[9] + xt[13] * r_10[
    #                      10] + xt[14] * r_10[11] + x[0] * t[0] * r_10[12] + x[1] * t[1] * r_10[13] + x[2] * t[2] * r_10[
    #                      14] + x[3] * t[3] * r_10[15]) + \
    #          p[4] * (xt[4] * r_11[0] + xt[5] * r_11[1] + xt[6] * r_11[2] + xt[7] * r_11[3] + xt[8] * r_11[4] + xt[9] *
    #                  r_11[5] + xt[10] * r_11[6] + xt[11] * r_11[7] + xt[12] * r_11[8] + xt[13] * r_11[9] + xt[14] *
    #                  r_11[10] + x[0] * t[0] * r_11[11] + x[1] * t[1] * r_11[12] + x[2] * t[2] * r_11[13] + x[3] * t[3] *
    #                  r_11[14] + x[4] * t[4] * r_11[15]) + \
    #          p[5] * (xt[5] * r_12[0] + xt[6] * r_12[1] + xt[7] * r_12[2] + xt[8] * r_12[3] + xt[9] * r_12[4] + xt[10] *
    #                  r_12[5] + xt[11] * r_12[6] + xt[12] * r_12[7] + xt[13] * r_12[8] + xt[14] * r_12[9] + x[0] * t[0] *
    #                  r_12[10] + x[1] * t[1] * r_12[11] + x[2] * t[2] * r_12[12] + x[3] * t[3] * r_12[13] + x[4] * t[4] *
    #                  r_12[14] + x[5] * t[5] * r_12[15])) >= 0

    # 求解

    status = prob.solve()

    print(status)
    print(LpStatus[status])
    print(value(prob.objective))  # 计算结果

    for i in prob.variables():
        print(i.varValue)
